#!/bin/sh
#
# Copyright (c) 2009-2011 Matthias Hopf <mhopf@suse.de>
# Copyright (c) 2011 Jan Loeser <jloeser@suse.de>
# Copyright (c) 2012 Gerhard Schlotter <gschlotter@suse.de>
# Copyright (c) 2013 Rick Salevsky <rsalevsky@suse.de>
# Copyright (c) 2014 Joshua Schmidt <jschmid@suse.de>
# Copyright (c) 2015 Benjamin Hertwig <bhertwig@suse.de>
# Copyright (c) 20018 Jürgen Löhel <jloehel@suse.com>
# Copyright (c) 2009-2018 Stefan Dirsch <sndirsch@suse.de>
# Copyright (c) 2009-2018 Oliver Neukum <oneukum@suse.de>
# Copyright (c) 2009-2018 Takashi Iwai <tiwai@suse.de>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

script_name=$0
dir=/var/tmp
log=$dir/stsx.log

usage(){
  cat <<EOF
Usage: ${script_name} [-mlpuh] <s4|s4k|s3|s3k|s0|s0k|s43|s43k|s30|s30k|s40|s40k|s4simdev|s4simcore|s3simdev|s3simplatform|s3simcore|s4simcpu>

-m    Specifies the maximum of retries.
      Default: 9999999999
-l    Specifies the watchdog server.
      Example: localhost
-p    Specifies the port of the watchdog server
      Default: 1234
-u    The username of the user who owns the GNOME/KDE/XFCE-Session.
      This username is required to disable the auto suspend/blank properly.
      If you don't specify this username, please disable auto suspend/black
      manually.
-h    Displays this message

      Possible deductions:
      simdev fails                 -> no BIOS issue
      simcore passes AND s4k fails -> BIOS issue
      s4simcpu fails               -> no BIOS issue + CPU hotplug bug

      Only use coresim on machines that switch off power to busses in
      ACPI.

EOF
}

error(){
  echo "[Error] $1"
  echo ""
  usage
  exit 1
}

if [ x`id -u` != x0 ] ; then
  error "Please call the script as root!"
fi

#
# Args analysis
#

# Default arguments
method=""
watchdog=""
watchdog_port=1234
maxnum=9999999999
user=""
dbus_cookie=""

while getopts "l:m:p:u:h" opt; do
  case ${opt} in
    m) maxnum=$OPTARG ;;
    l) watchdog=$OPTARG ;;
    p) watchdog_port=$OPTARG ;;
    u) user=$OPTARG ;;
    h)
      usage
      exit 0
      ;;
    \?) error "Unknow option!" ;;
  esac
done
shift $(($OPTIND-1))
method="$1"

delay=10
resume=""
alternate="none"
simulation="none"

case "x$method" in
  xs4)            resume=70 ;;
  xs4k)           resume=70 ;;
  xs3)            resume=20 ;;
  xs3k)           resume=20 ;;
  xs0)            resume=20; ;;
  xs0k)           resume=20; ;;
  xs43)           alternate="s3" method="s4" resume=70 ;;
  xs43k)          alternate="s3k" method="s4k" resume=70 ;;
  xs30)           alternate="s0" method="s3" resume=20 ;;
  xs30k)          alternate="s0k" method="s3k" resume=20 ;;
  xs40)           alternate="s0" method="s4" resume=70 ;;
  xs40k)          alternate="s0k" method="s4k" resume=70 ;;
  xs4simdev)      simulation="devices" delay=5 ;;
  xs4simcore)     simulation="core" delay=5 ;;
  xs3simdev)      simulation="devices" delay=5 ;;
  xs3simplatform) simulation="platform" delay=5 ;;
  xs3simcore)     simulation="core" delay=5; ;;
  xs4simcpu)      simulation="processors" delay=0 ;;
  x)              error "Argument missing. Please specify a method.";;
  *)              error "Unknown method $method"
esac

if ! [ "$watchdog_port" -ge 1 -a "$watchdog_port" -le 65535 ]; then
  error "Port number of the watchdog is out of range."
fi

if [ "x$watchdog" != x ]; then
  nc -w 5 -z $watchdog $watchdog_port > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    error "The watchdog is not reachable."
  fi
fi

if [ "x${user}" != "x" ] && [ -z "$(getent passwd $user | cut -d: -f1)" ];then
  error "No such user: ${user}"
fi

#
# Preparations
#

if [ "x$resume" != x ] ; then

  # Set hwclock as UTC to current clock
  . /etc/sysconfig/clock
  if [ "x$HWCLOCK" != x-u ] ; then
    echo "!!ATTENTION!! Setting up UTC hw clock"
    sed -i '/^HWCLOCK=/s/.*/HWCLOCK="-u"/' /etc/sysconfig/clock
  fi
  /sbin/hwclock --systohc -u

fi

uninhibit_power_mgmt() {
  echo "!!ATTENTION!! Enable PowerMangement."
  su $user -c \
    "dbus-send \
    --print-reply=literal \
    --dest=org.freedesktop.PowerManagement \
    /org/freedesktop/PowerManagement/Inhibit \
    org.freedesktop.PowerManagement.Inhibit.UnInhibit uint32:${dbus_cookie}"
  echo "PowerManagement uninhibited (cookie:${dbus_cookie})"
}

inhibit_power_mgmt() {
  echo "!!ATTENTION!! Disabling PowerMangement."
  dbus_cookie=$(su $user -c \
    "dbus-send \
    --print-reply=literal \
    --dest=org.freedesktop.PowerManagement \
    /org/freedesktop/PowerManagement/Inhibit \
    org.freedesktop.PowerManagement.Inhibit.Inhibit \
    string:'${script_name}' \
    string:'Disable pwr mgmt for awhile.'" | awk '{print $2}')
  trap uninhibit_power_mgmt EXIT
}

# Disable auto suspend / blank
if [ x$user != x ];then
  inhibit_power_mgmt
fi

echo ""

#instruct the kernel
echo $simulation > /sys/power/pm_test
pmtrace=1
test "x$simulation" = xnone && pmtrace=0
test -e /sys/power/pm_trace && echo $pmtrace > /sys/power/pm_trace

#
# State dumper
#

dump_state() {
  echo "======================================"
  echo "PCI CONFIG SPACE"
  echo "--------------------------------------"
  /sbin/lspci -xxxvv
  echo "======================================"
  echo "DMI"
  echo "--------------------------------------"
  /usr/sbin/dmidecode
  echo "======================================"
  echo "dmesg"
  echo "--------------------------------------"
  dmesg
}

#
# Other subroutines
#

set_alarm() {
  while true ; do
    echo 0 >/sys/class/rtc/rtc0/wakealarm && break
    sleep 1
  done
  while true ; do
    echo $t >/sys/class/rtc/rtc0/wakealarm && break
    sleep 1
  done
  sleep 1
}

#
# Main loop
#

echo "Logging to $log + $dir/stsx.state.*"
echo ""
rm -f $log
find $dir -name stsx.state.\* -exec rm  \{\} \+
:> $log
c=0
nextsync=20

while [ $c -lt $maxnum ] ; do

  # Setup delay
  if [ "x$delay" != x0 ] ; then
    echo "Sleeping $delay secs..."
    sleep $delay
  fi

  # State dump
  c=$(($c+1))
  dump_state >$dir/stsx.state.$c 2>&1
  gzip $dir/stsx.state.$c

  # Setting info to watchdog
  # Do after sleep (so networkmanager has a chance)
  # TODO: send state shortcut
  if [ "x$watchdog" != x ] ; then
    echo "$method $c" | netcat $watchdog $watchdog_port
  fi
  if [ "x$resume" != x ] ; then

    # Resync HW clock
    if [ $c -ge $nextsync ] ; then
      echo "resyncing clock..."
      /sbin/hwclock --hctosys -u
      nextsync=$(($nextsync+20))
    fi

    # Resume time calc
    t=`date +%s -d "$resume secs"`
    tt="`date -d @$t`"
    echo "$method sim $simulation $c: Wakeup at $tt"
    echo "$method sim $simulation $c: Wakeup at $tt" >>$log

  fi

  d="`date`"
  echo "$method sim $simulation $c: $d: suspending..."
  echo "$method sim $simulation $c: $d: suspending..." >>$log

  # Emergency sync
  sync

  # Suspend/Hibernate
  case "x$method" in
  xs4)
    set_alarm $t
    if which pm-hibernate >/dev/null; then
        pm-hibernate
    else 
        systemctl hibernate
    fi
    ;;
  xs4k)
    set_alarm $t
    echo disk >/sys/power/state
    ;;
  xs3)
    #NUM_SECONDS_TO_SLEEP=$resume pm-suspend
    set_alarm $t
    echo deep >/sys/power/mem_sleep
    if which pm-suspend >/dev/null; then
        pm-suspend
    else
        systemctl suspend
    fi
    ;;
  xs3k)
    set_alarm $t
    echo deep >/sys/power/mem_sleep
    echo mem >/sys/power/state
    ;;
  xs0)
    set_alarm $t
    echo s2idle >/sys/power/mem_sleep
    if which pm-suspend >/dev/null; then
        pm-suspend
    else
        systemctl suspend
    fi
    ;;
  xs0k)
    set_alarm $t
    echo s2idle >/sys/power/mem_sleep
    echo mem >/sys/power/state
    ;;
  xs4sim*)
    echo disk >/sys/power/state
    ;;
  xs3sim*)
    echo mem >/sys/power/state
    ;;
  *)
    exit 1;
  esac

  # Post-resume
  d="`date`"
  echo "$method sim $simulation $c: $d: resuming" >>$log
  sync
  echo "$method sim $simulation $c: $d: resuming"


  if [ "x$alternate" != "xnone" ] ; then
    temp=$alternate
    alternate=$method
    method=$temp
    case $method in
      s4*) resume=70 ;;
      *)   resume=20
    esac
  fi


done

#
# EOT
#
echo "none" >/sys/power/pm_test
echo "Maximum reached"
echo "Maximum reached" >>$log

exit 0
